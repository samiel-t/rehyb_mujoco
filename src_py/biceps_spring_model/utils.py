from mujoco_py import load_model_from_path, MjSim, MjViewer

import numpy as np

'''
For further details on geometric notations, see "spring_biceps_model.pdf"
'''


def X2(x2, y2, theta):
    '''
    Returns x_coordinate in frame R1 of (x2, y2)
    '''
    return x2*np.cos(theta)-y2*np.sin(theta)


def Y2(x2, y2, theta):
    '''
    Returns y_coordinate in frame R1 of (x2, y2)
    '''
    return x2*np.sin(theta)+y2*np.cos(theta)


def vectorOS2(x2, y2, theta):
    '''
    Returns coordinates of vector OS2 in frame R1
    '''
    return np.array([X2(x2, y2, theta), Y2(x2, y2, theta)])


def vectorS2S1(x1, y1, x2, y2, theta):
    '''
    Returns coordinates of vector S2S1 in frame R1
    '''
    return np.array([x1-X2(x2, y2, theta), y1-Y2(x2, y2, theta)])


def Fel(x1, y1, x2, y2, theta, k, L0):
    '''
    Returns the force generated by the spring S1S2
    '''
    return k*(np.linalg.norm(vectorS2S1(x1, y1, x2, y2, theta), axis=0) - L0)


def young_mod_to_stiffness(radius, rest_length, E=24.7e3):
    '''
    Returns muscle stiffness using its Young's modulus and its radius
    '''
    return np.pi*radius**2*E/rest_length


def vectorOS2orth(x2, y2, theta):
    '''
    Returns the vector v such that: v.v = OS2.OS2 and (v, OS2) = +pi/2
    '''
    return np.array([Y2(x2, y2, theta), -X2(x2, y2, theta)])


def Mel(x1, y1, x2, y2, theta, k, L0):
    '''
    Returns the torque generated by the spring S1S2
    '''
    OS2orth = vectorOS2orth(x2, y2, theta)
    S2S1 = vectorS2S1(x1, y1, x2, y2, theta)

    dots = np.array([np.dot(u, v) for u, v in zip(OS2orth.T, S2S1.T)])
    norms = np.linalg.norm(S2S1, axis=0)

    return -k*(norms - L0)*dots


def measure_passive_force_biceps(length_movement=1500, trigger_force=2, path_to_model="biceps_alone.xml"):
    '''
    Simulates a biceps model in MuJoCo and returns force and angle measurements
    '''
    model = load_model_from_path(path_to_model)
    sim = MjSim(model)

    flexion_data = np.zeros((3, 0))
    extension_data = np.zeros((3, 0))

    for _ in range(200):
        sim.step()

    # trigger flexion with a constant force
    sim.data.qfrc_applied[0] = -trigger_force
    for _ in range(length_movement):
        new_col = np.array([sim.data.get_joint_qpos(
            "elb-flex"), sim.data.actuator_force[0], sim.data.actuator_moment[0][0]])
        flexion_data = np.concatenate((
            flexion_data, new_col.reshape(3, 1)), axis=1)
        sim.step()

    # trigger extension with a constant force
    sim.data.qfrc_applied[0] = trigger_force
    for _ in range(length_movement):
        new_col = np.array([sim.data.get_joint_qpos(
            "elb-flex"), sim.data.actuator_force[0], sim.data.actuator_moment[0][0]])
        extension_data = np.concatenate((
            extension_data, new_col.reshape(3, 1)), axis=1)
        sim.step()

    return flexion_data, extension_data


def play_biceps_experience(n_times=1, length_movement=1500, trigger_force=2, path_to_model="biceps_alone.xml"):
    '''
    Plays the experience carried out by measure_passive_force_biceps via a glfw viewer
    '''
    model = load_model_from_path(path_to_model)
    sim = MjSim(model)

    orig_state = sim.get_state()

    viewer = MjViewer(sim)

    for _ in range(n_times):
        sim.set_state(orig_state)

        # trigger flexion with a constant force
        sim.data.qfrc_applied[0] = -trigger_force
        for _ in range(length_movement):
            sim.step()
            viewer.render()

        # trigger extension with a constant force
        sim.data.qfrc_applied[0] = trigger_force
        for _ in range(length_movement):
            sim.step()
            viewer.render()


if __name__ == "__main__":
    try:
        play_biceps_experience()
    except:
        print("Script termination")
